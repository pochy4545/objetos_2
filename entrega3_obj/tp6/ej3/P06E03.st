Object subclass: #Album	instanceVariableNames: 'songs title'	classVariableNames: ''	poolDictionaries: ''	category: 'P06E03'!!Album commentStamp: 'Anonymous 5/31/2018 02:02' prior: 0!6.3!!Album methodsFor: 'initialization' stamp: 'agustin 5/16/2018 16:08'!title	^ title! !!Album methodsFor: 'initialization' stamp: 'Anonymous 5/31/2018 02:29'!addSong: aSong	self songs add: aSong! !!Album methodsFor: 'initialization' stamp: 'Anonymous 5/31/2018 02:29'!buscarSong: aString	^ self songs select: [ :song | song buscarTitle: aString ]! !!Album methodsFor: 'initialization' stamp: 'agustin 5/16/2018 16:08'!title: aTitle	title := aTitle! !!Album methodsFor: 'initialization' stamp: 'agustin 5/16/2018 15:47'!songs	^ songs! !!Album methodsFor: 'initialization' stamp: 'Anonymous 5/31/2018 02:28'!songs:unaColecion	songs:=unaColecion! !!Album methodsFor: 'initialization' stamp: 'Anonymous 5/31/2018 02:29'!removeSong: aSong	self songs remove: aSong! !!Album methodsFor: 'initialization' stamp: 'Anonymous 5/31/2018 02:28'!initialize	self songs: OrderedCollection new! !!Album methodsFor: 'as yet unclassified' stamp: 'agustin 5/16/2018 18:47'!albumBuscado: aString	^ (self title) includesSubstring: aString caseSensitive: false! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Album class	instanceVariableNames: ''!!Album class methodsFor: 'instance creation' stamp: 'Anonymous 5/31/2018 03:05'!newAlbum: aTitle	^ self new title: aTitle! !Object subclass: #Autor	instanceVariableNames: 'albumes name'	classVariableNames: ''	poolDictionaries: ''	category: 'P06E03'!!Autor commentStamp: 'Anonymous 5/31/2018 02:02' prior: 0!6.3!!Autor methodsFor: 'initialization' stamp: 'agustin 5/16/2018 16:07'!name	^ name! !!Autor methodsFor: 'initialization' stamp: 'Anonymous 5/31/2018 02:28'!addAlbum: anAlbum	self albumes add: anAlbum! !!Autor methodsFor: 'initialization' stamp: 'Anonymous 5/31/2018 02:27'!buscarPorAlbum: aString	^ (self albumes  select: [ :album | album albumBuscado: aString ]) flatCollect: [ :album | album songs ]! !!Autor methodsFor: 'initialization' stamp: 'agustin 5/16/2018 16:07'!name: aName	name := aName! !!Autor methodsFor: 'initialization' stamp: 'Anonymous 5/31/2018 02:28'!removeAlbum: anAlbum	self albumes remove: anAlbum! !!Autor methodsFor: 'initialization' stamp: 'Anonymous 5/31/2018 02:28'!initialize	self albumes: OrderedCollection new! !!Autor methodsFor: 'initialization' stamp: 'agustin 5/16/2018 15:49'!albumes	^ albumes! !!Autor methodsFor: 'initialization' stamp: 'Anonymous 5/31/2018 02:55'!buscarSongEnAlbums: aString	^ self albumes flatCollect: [ :album | album buscarSong: aString ]! !!Autor methodsFor: 'initialization' stamp: 'Anonymous 5/31/2018 02:27'!albumes:unaColecionalbumes:=unaColecion! !!Autor methodsFor: 'as yet unclassified' stamp: 'Anonymous 5/31/2018 02:27'!dameMisTemas	^ self albumes flatCollect:  [ :album | album songs ]! !!Autor methodsFor: 'as yet unclassified' stamp: 'agustin 5/16/2018 18:04'!autorBuscado: aString	^ (self name) includesSubstring: aString caseSensitive: false! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Autor class	instanceVariableNames: ''!!Autor class methodsFor: 'instance creation' stamp: 'Anonymous 5/31/2018 02:08'!newAutor: aName	^ self new name: aName! !Object subclass: #Song	instanceVariableNames: 'title'	classVariableNames: ''	poolDictionaries: ''	category: 'P06E03'!!Song commentStamp: 'Anonymous 5/31/2018 02:02' prior: 0!6.3!!Song methodsFor: 'instance creation' stamp: 'agustin 5/16/2018 16:02'!title	^ title! !!Song methodsFor: 'instance creation' stamp: 'agustin 5/16/2018 16:02'!title: aTitle	title := aTitle! !!Song methodsFor: 'instance creation' stamp: 'agustin 5/16/2018 18:35'!buscarTitle: aString	^ (self title) includesSubstring: aString caseSensitive: false! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Song class	instanceVariableNames: ''!!Song class methodsFor: 'instance creation' stamp: 'Anonymous 5/31/2018 02:08'!newSong: aTitle	^ self new title:aTitle! !Object subclass: #Spootify	instanceVariableNames: 'autores users'	classVariableNames: ''	poolDictionaries: ''	category: 'P06E03'!!Spootify commentStamp: 'Anonymous 5/31/2018 02:02' prior: 0!6.3!!Spootify methodsFor: 'initialization' stamp: 'Anonymous 5/31/2018 02:26'!initialize	self autores:OrderedCollection new.	self users: OrderedCollection new! !!Spootify methodsFor: 'initialization' stamp: 'Anonymous 5/31/2018 02:26'!buscarPorAlbum: aString	^ self autores flatCollect: [ :autor | autor buscarPorAlbum: aString ]! !!Spootify methodsFor: 'adding' stamp: 'Anonymous 5/31/2018 02:27'!addAutor: unAutor	self autores add: unAutor! !!Spootify methodsFor: 'adding' stamp: 'Anonymous 5/31/2018 02:26'!addUser: aUser	self users add: aUser! !!Spootify methodsFor: 'as yet unclassified' stamp: 'Anonymous 5/31/2018 02:26'!buscarPorAutor: aString	^ (self autores select: [ :au | au autorBuscado: aString ])		flatCollect: [ :autor | autor dameMisTemas ]! !!Spootify methodsFor: 'as yet unclassified' stamp: 'Anonymous 5/31/2018 02:55'!buscarPorTitulo: aString	^ self autores flatCollect: [ :autor | autor buscarSongEnAlbums: aString ]! !!Spootify methodsFor: 'removing' stamp: 'Anonymous 5/31/2018 02:26'!removeAutor: unAutor	self autores remove: unAutor! !!Spootify methodsFor: 'removing' stamp: 'Anonymous 5/31/2018 02:26'!removeUser: aUser	self users remove: aUser! !!Spootify methodsFor: 'accessing' stamp: 'Anonymous 5/31/2018 02:25'!users ^users! !!Spootify methodsFor: 'accessing' stamp: 'Anonymous 5/31/2018 02:25'!autores:unaColecion autores:=unaColecion! !!Spootify methodsFor: 'accessing' stamp: 'Anonymous 5/31/2018 02:25'!autores ^autores! !!Spootify methodsFor: 'accessing' stamp: 'Anonymous 5/31/2018 02:26'!users:unaColeccion users:=unaColeccion! !TestCase subclass: #TestAlbum	instanceVariableNames: 'album1 cancion1 cancion2'	classVariableNames: ''	poolDictionaries: ''	category: 'P06E03'!!TestAlbum commentStamp: 'Anonymous 5/31/2018 02:02' prior: 0!6.3!!TestAlbum methodsFor: 'tests' stamp: 'Anonymous 5/31/2018 01:50'!setUp		"Crear album"	album1 := Album newAlbum: 'undefined'.		"Crear canciones"	cancion1 := Song newSong: 'uno'.	cancion2 := Song newSong: 'dos'.! !!TestAlbum methodsFor: 'tests' stamp: 'Anonymous 5/30/2018 19:58'!testAddSong	"Verificar si la colección del album1 se encuentra vacía"	self assert: (album1 songs isEmpty).  		"Agregar una canción album vacío"	album1 addSong: cancion1.	self assert: (album1 songs includes: cancion1).	self assert: (album1 songs size)equals: 1.  		"Agregar una canción a un album que ya tiene una canción"	album1 addSong: cancion2.	self assert: (album1 songs includes: cancion2).	self assert: (album1 songs size) equals: 2.  		! !!TestAlbum methodsFor: 'tests' stamp: 'Anonymous 5/31/2018 02:14'!testAlbumBuscadoPorNombre	"Buscar por substring del nombre"	self assert: (album1 albumBuscado: 'undefined')! !!TestAlbum methodsFor: 'tests' stamp: 'Anonymous 5/31/2018 02:14'!testAlbumBuscadoPorSubstring	"Buscar por substring del nombre"	self assert: (album1 albumBuscado: 'Un')! !!TestAlbum methodsFor: 'tests' stamp: 'Anonymous 5/31/2018 02:14'!testAlbumBuscadoPorNombreInsensitive	"Buscar por substring del nombre"	self assert: (album1 albumBuscado: 'uNdEfInEd')! !!TestAlbum methodsFor: 'tests' stamp: 'Anonymous 5/31/2018 03:34'!testBuscarSong	album1 addSong:cancion1.	self assert:(( album1 buscarSong:'uno')includes:cancion1 ).	self assert:(( album1 buscarSong:'UnO')includes:cancion1 ). 	album1 addSong: cancion2.   	self assert:(( album1 buscarSong:'DoS')includes:cancion2 ).	self assert:(( album1 buscarSong:'dos')includes:cancion2 ).  		! !!TestAlbum methodsFor: 'tests' stamp: 'Anonymous 5/30/2018 19:58'!testRemoveSong	album1 addSong: cancion1.	album1 addSong: cancion2.		"Verifico que se elimine un elemento especifico de una colección"	album1 removeSong: cancion1.	self deny: (album1 songs includes: cancion1).	self assert: (album1 songs size) equals: 1.	"Verificar si la colección del album1 se encuentra vacía"	album1 songs removeAll.	self assert: album1 songs isEmpty! !!TestAlbum methodsFor: 'tests' stamp: 'Anonymous 5/31/2018 02:10'!testNewAlbum	"Crear un album"	self assert: (album1 title) equals: 'undefined'.! !TestCase subclass: #TestAutor	instanceVariableNames: 'autor1 albun1 albun2 cancion1 cancion2 cancion3 cancion4 cancion5'	classVariableNames: ''	poolDictionaries: ''	category: 'P06E03'!!TestAutor commentStamp: 'Anonymous 5/31/2018 02:02' prior: 0!6.3!!TestAutor methodsFor: 'tests' stamp: 'Anonymous 5/30/2018 20:18'!testAgregarAlbun "me fijo si esta vacio" self assert: (autor1 albumes isEmpty). autor1 addAlbum: albun1. self assert: (autor1 albumes size)equals:1. ! !!TestAutor methodsFor: 'tests' stamp: 'Anonymous 5/31/2018 04:02'!testdameMisTemas "agrego un albun con titulo first" autor1 addAlbum:albun1. "verifico que no tenga temas" self assert: ((autor1 dameMisTemas)size) equals:0. "agrego una cancion " albun1 addSong:cancion1. self assert: ((autor1 dameMisTemas)size) equals:1. self assert: ((autor1 dameMisTemas)includes:cancion1).  albun1 addSong:cancion2. self assert: ((autor1 dameMisTemas)size) equals:2. self assert: ((autor1 dameMisTemas)includes:cancion2).  autor1 addAlbum: albun2. albun2 addSong:cancion3. self assert: ((autor1 dameMisTemas)size) equals:3. self assert: ((autor1 dameMisTemas)includes:cancion3).    ! !!TestAutor methodsFor: 'tests' stamp: 'Anonymous 5/31/2018 03:47'!testBuscarPorAlbum "agrego un albun con titulo first" autor1 addAlbum:albun1. "titulo uno" albun1 addSong:cancion1. "titulo dos" albun1 addSong:cancion2. "verifico que busca por albun y que efectivamente la coleccion que devuelve los contiene" self assert: ((autor1 buscarPorAlbum:'first')size)equals:2. "pruebo si es sensible a minuscula y mayuscula" self assert: ((autor1 buscarPorAlbum:'fiRst')includes:cancion1). "pruebo si busca por substring" self assert: ((autor1 buscarPorAlbum:'fir')includes:cancion2). "verifico que si busco por un albun que no existe"      self assert: ((autor1 buscarPorAlbum:'second')size) equals:0. ! !!TestAutor methodsFor: 'tests' stamp: 'Anonymous 5/31/2018 02:12'!testBuscarAutorSubstr self assert: (autor1 autorBuscado: 'po'). "testeo que no sea case sensitive"! !!TestAutor methodsFor: 'tests' stamp: 'Anonymous 5/31/2018 04:06'!testRemoveAlbum "me fijo si esta vacio" self assert: (autor1 albumes isEmpty). autor1 addAlbum: albun1. self assert: (autor1 albumes size)equals:1. autor1 addAlbum: albun2. self assert: (autor1 albumes size)equals:2. autor1 removeAlbum:albun2. self assert: (autor1 albumes size)equals:1. self deny: (autor1 albumes includes:albun2) ! !!TestAutor methodsFor: 'tests' stamp: 'Anonymous 5/31/2018 03:55'!testbuscarSongEnAlbums "agrego un albun con titulo first" autor1 addAlbum:albun1. "agrego cancion titulo dos al primer albun" albun1 addSong:cancion2. "agrego un albun con titulo second" autor1 addAlbum:albun2. "agrego cancion con titulo dosdos al segundo albun" albun2 addSong:cancion5.  "verifico que encuentra las dos canciones que estan en diferentes albunes" self assert: ((autor1 buscarSongEnAlbums:'dos')size)equals:2. "verifico que si soy mas especifico solo me encuentra la del segundo album"  self assert: ((autor1 buscarSongEnAlbums:'dosdos')size)equals:1. "verifico que efectivamente son estas canciones" self assert: ((autor1 buscarSongEnAlbums:'dos')includes:cancion2). self assert: ((autor1 buscarSongEnAlbums:'dos')includes:cancion5). ! !!TestAutor methodsFor: 'tests' stamp: 'Anonymous 5/31/2018 02:12'!testBuscarAutor self assert: (autor1 autorBuscado: 'pochi'). "testeo que no sea case sensitive"! !!TestAutor methodsFor: 'tests' stamp: 'Anonymous 5/31/2018 02:02'!testBuscarAutorInsensitive self assert: (autor1 autorBuscado: 'PoChI').! !!TestAutor methodsFor: 'initialization' stamp: 'Anonymous 5/31/2018 03:38'!setUp		autor1:= Autor newAutor: 'pochi'.	albun1:= Album newAlbum: 'first'.	albun2:= Album newAlbum: 'second'.	"Crear canciones"	cancion1 := Song newSong: 'uno'.	cancion2 := Song newSong: 'dos'.   cancion3 := Song newSong: 'tres'.   cancion4 := Song newSong: 'cuatro'.   cancion5 := Song newSong: 'dosdos'.		! !TestCase subclass: #TestSong	instanceVariableNames: 'cancion1'	classVariableNames: ''	poolDictionaries: ''	category: 'P06E03'!!TestSong methodsFor: 'initialization' stamp: 'Anonymous 5/31/2018 02:10'!setUp cancion1:=Song newSong:'uno'.! !!TestSong methodsFor: 'tests' stamp: 'Anonymous 5/31/2018 03:31'!testBuscarTitle "busca por substrign"	self assert: (cancion1 buscarTitle: 'un'). "busca por titulo completo"		self assert: (cancion1 buscarTitle: 'uno'). "busca sin importar minuscula y mayuscula"	self assert: (cancion1 buscarTitle: 'uNo').! !!TestSong methodsFor: 'tests' stamp: 'Anonymous 5/31/2018 02:10'!testNewSong	self assert: (cancion1 title)equals: 'uno'.! !TestCase subclass: #TestSpootify	instanceVariableNames: 'album1 album2 album4 cancion1 cancion2 autor1 autor2 cancion3 spo user'	classVariableNames: ''	poolDictionaries: ''	category: 'P06E03'!!TestSpootify commentStamp: 'Anonymous 5/31/2018 02:17' prior: 0!6.3!!TestSpootify methodsFor: 'tests' stamp: 'Anonymous 5/31/2018 04:27'!testBuscarPorAlbum spo addAutor:autor1. spo addAutor:autor2. autor1 addAlbum:album1. autor1 addAlbum:album2. autor2 addAlbum:album4. album1 addSong:cancion1. album2 addSong:cancion2. album4 addSong:cancion1.album4 addSong: cancion2 .album4 addSong: cancion3.  "si bien cancion 2 es del mismo autor no pertenece al album fist" self assert: ((spo buscarPorAlbum:'fist')size)equals:1.  self assert: ((spo buscarPorAlbum:'fist')includes:cancion1). self assert:((spo buscarPorAlbum:'four')size)equals:3. self assert:((spo buscarPorAlbum:'four')includes:cancion1). self assert:((spo buscarPorAlbum:'four')includes:cancion2). self assert:((spo buscarPorAlbum:'four')includes:cancion3) .    ! !!TestSpootify methodsFor: 'tests' stamp: 'Anonymous 5/31/2018 04:31'!testbuscarPorAutor spo addAutor:autor1. spo addAutor:autor2. autor1 addAlbum:album1. autor1 addAlbum:album2. autor2 addAlbum:album4. album1 addSong:cancion1. album2 addSong:cancion2. album4 addSong:cancion1.album4 addSong: cancion2 .album4 addSong: cancion3.  self assert: ((spo buscarPorAutor:'pochi')size)equals:2. self assert: ((spo buscarPorAutor:'pochi')includes: cancion1). self assert: ((spo buscarPorAutor:'pochi')includes: cancion2). self assert: ((spo buscarPorAutor:'eze')size)equals:3. self assert: ((spo buscarPorAutor:'eze')includes: cancion1). self assert: ((spo buscarPorAutor:'eze')includes: cancion2). self assert: ((spo buscarPorAutor:'eze')includes: cancion3).     ! !!TestSpootify methodsFor: 'tests' stamp: 'Anonymous 5/31/2018 04:42'!testRemoveAutor self assert: (spo autores isEmpty). spo addAutor:autor1. self assert: (spo autores size)equals:1. self assert: (spo autores includes: autor1). spo removeAutor:autor1. self assert: (spo autores size)equals:0. self deny: (spo autores includes: autor1).  ! !!TestSpootify methodsFor: 'tests' stamp: 'Anonymous 5/31/2018 04:44'!testRemoveUser self assert: (spo users isEmpty). spo addUser:user. self assert: (spo users size)equals:1. self assert: (spo users includes: user). spo removeUser:user. self assert: (spo users size)equals:0. self deny: (spo users  includes: user).  ! !!TestSpootify methodsFor: 'tests' stamp: 'Anonymous 5/31/2018 04:44'!testAddUser self assert: (spo users isEmpty). spo addUser:user. self assert: (spo users size)equals:1. self assert: (spo users includes: user).  ! !!TestSpootify methodsFor: 'tests' stamp: 'Anonymous 5/31/2018 04:38'!testBuscarPorTitulo spo addAutor:autor1. spo addAutor:autor2. autor1 addAlbum:album1. autor2 addAlbum:album4. album1 addSong:cancion1."uno" album4 addSong: cancion2."dos" album4 addSong: cancion3."dosdos"  self assert:((spo buscarPorTitulo:'dos')size)equals:2. self assert:((spo buscarPorTitulo:'dos')includes:cancion3). self assert:((spo buscarPorTitulo:'dos')includes:cancion2). self assert:((spo buscarPorTitulo:'uno')size)equals:1. self assert:((spo buscarPorTitulo:'uno')includes:cancion1 ).  ! !!TestSpootify methodsFor: 'tests' stamp: 'Anonymous 5/31/2018 04:40'!testAddAutor self assert: (spo autores isEmpty). spo addAutor:autor1. self assert: (spo autores size)equals:1. self assert: (spo autores includes: autor1)  ! !!TestSpootify methodsFor: 'initialization' stamp: 'Anonymous 5/31/2018 04:43'!setUp spo:=Spootify new. autor1:=Autor newAutor:'pochi'. autor2:=Autor newAutor: 'eze'. user:=User new:'pochi'. "Crear album"	album1 := Album newAlbum: 'fist'.	album2 := Album newAlbum: 'second'.	album3 := Album newAlbum: 'tree'.	album4 := Album newAlbum: 'four'.		"Crear canciones"	cancion1 := Song newSong: 'uno'.	cancion2 := Song newSong: 'dos'.	cancion3 := Song newSong: 'dosdos'.! !Object subclass: #User	instanceVariableNames: 'myMusic nombre'	classVariableNames: ''	poolDictionaries: ''	category: 'P06E03'!!User commentStamp: 'Anonymous 5/31/2018 05:07' prior: 0!no hice el test de la clase usuario ya que este no tiene mucha funcionalidad ya que lo que hace es practicamente delegar las responsabilidades a sootify .!!User methodsFor: 'accessing' stamp: 'Anonymous 5/11/2018 15:12'!name ^ nombre! !!User methodsFor: 'accessing' stamp: 'Anonymous 5/11/2018 15:13'!name:unNombre nombre:=unNombre.! !!User methodsFor: 'initialization' stamp: 'Anonymous 5/31/2018 02:24'!myMusic:unaColecion	myMusic:=unaColecion! !!User methodsFor: 'initialization' stamp: 'Anonymous 5/31/2018 06:06'!initialize	self myMusic: OrderedCollection new.		! !!User methodsFor: 'initialization' stamp: 'agustin 5/16/2018 15:51'!myMusic	^ myMusic! !!User methodsFor: 'as yet unclassified' stamp: 'Anonymous 5/31/2018 02:23'!agregar: aSong	self myMusic add: aSong.! !!User methodsFor: 'as yet unclassified' stamp: 'Anonymous 5/31/2018 02:24'!remover: aSong	self myMusic remove: aSong.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!User class	instanceVariableNames: ''!!User class methodsFor: 'instance creation' stamp: 'Anonymous 5/11/2018 15:13'!new: aName  ^ self new  name: aName.   	! !